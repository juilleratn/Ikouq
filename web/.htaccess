# Utilisez le contrôleur frontal comme fichier d’index. Il sert de solution de secours lorsque
# toutes les réécriture / redirection échouent (par exemple, dans un environnement avec alias sans
# mod_rewrite). De plus, cela réduit le processus de correspondance pour la page de démarrage
# (chemin "/") car sinon, Apache appliquera les règles de réécriture
# à chaque fichier DirectoryIndex configuré (par exemple, index.php, index.html, index.pl).
DirectoryIndex app.php

# Par défaut, Apache n’évalue pas les liens symboliques si vous n’avez pas activé cette option.
# fonctionnalité dans la configuration de votre serveur. Décommentez la ligne suivante si vous
# installer des ressources sous forme de liens symboliques ou si vous rencontrez des problèmes liés aux liens symboliques
# lors de la compilation d’actifs LESS / Sass / CoffeScript.
 Options FollowSymlinks

# La désactivation de MultiViews empêche les négociations non désirées, par exemple. "/ app" ne devrait pas résoudre
# sur le contrôleur frontal "/app.php" mais être réécrit en "/app.php/app".
<IfModule mod_negotiation.c>
    Options -MultiViews
</IfModule>

<IfModule mod_rewrite.c>
    RewriteEngine On

    # Déterminez automatiquement le RewriteBase et définissez-le comme variable d’environnement.
       # Si vous utilisez des alias Apache pour l'hébergement virtuel de masse ou avez installé le
       # projet dans un sous-répertoire, le chemin de base sera ajouté au début pour permettre
       # résolution du fichier app.php et à rediriger vers l’URI correct. Ce sera
       # travailler dans des environnements sans préfixe de chemin également, offrant une solution unique et sécurisée
       # convient à toutes les solutions. Mais comme vous n'en avez pas besoin dans ce cas, vous pouvez commenter
       # les 2 lignes suivantes pour éliminer les frais généraux.
    RewriteCond %{REQUEST_URI}::$1 ^(/.+)/(.*)::\2$
    RewriteRule ^(.*) - [E=BASE:%1]

   # Définit l'en-tête HTTP_AUTHORIZATION supprimée par Apache
    RewriteCond %{HTTP:Authorization} .
    RewriteRule ^ - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]

    # Redirection vers l'URI sans contrôleur frontal pour éviter le contenu en double
     # (avec et sans `/ app.php`). Ne faites cette redirection qu'à la première
     # réécrit par Apache et non sur les cycles suivants. Sinon, nous aurions un
     # boucle de redirection sans fin (demande -> réécriture sur le contrôleur frontal ->
     # redirect -> request -> ...).
     # Donc, si vous obtenez une erreur "trop de redirections" ou si vous êtes toujours redirigé
     # à la page de démarrage car votre Apache n'expose pas le REDIRECT_STATUS
     # variable d'environnement, vous avez 2 choix:
     # - désactive cette fonctionnalité en commentant les 2 lignes suivantes ou
     # - utilisez Apache> = 2.3.9 et remplacez tous les drapeaux L par des drapeaux END et supprimez le
     # suivant RewriteCond (meilleure solution)
    RewriteCond %{ENV:REDIRECT_STATUS} ^$
    RewriteRule ^app\.php(?:/(.*)|$) %{ENV:BASE}/$1 [R=301,L]

    # Si le nom de fichier demandé existe, il suffit de le servir.
     # Nous voulons seulement laisser Apache servir des fichiers et non des répertoires.    RewriteCond %{REQUEST_FILENAME} -f
    RewriteRule ^ - [L]

    # Réécrit toutes les autres requêtes sur le contrôleur frontal.
    RewriteRule ^ %{ENV:BASE}/app.php [L]
</IfModule>

<IfModule !mod_rewrite.c>
    <IfModule mod_alias.c>
        # Lorsque mod_rewrite n'est pas disponible, nous ordonnons une redirection temporaire de
                 # la page de démarrage du contrôleur frontal explicitement pour que le site Web
                 # et les liens générés peuvent toujours être utilisés.
        RedirectMatch 302 ^/$ /app.php/
        # RedirectTemp ne peut pas être utilisé à la place
    </IfModule>
</IfModule>
